
probe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000001cc  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800108  00800108  00000268  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000022d  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000153  00000000  00000000  00000545  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001b1  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  0000084c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001b4  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014c  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  9e:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <conf_serial_com>:
uint8_t i=0;
uint8_t a=0;
//////////////////////////////////////////////////////////////
void conf_serial_com(void)
{
	UCSR0A=0;
  a6:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B=0b10011000; // transmite y recibe activa uint de recibido
  aa:	88 e9       	ldi	r24, 0x98	; 152
  ac:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C=0b00000110;
  b0:	86 e0       	ldi	r24, 0x06	; 6
  b2:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0=51;           //baud rate inicializado a 9600
  b6:	83 e3       	ldi	r24, 0x33	; 51
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 c5 00 	sts	0x00C5, r25
  be:	80 93 c4 00 	sts	0x00C4, r24
  c2:	08 95       	ret

000000c4 <serial_transmit>:
}
void serial_transmit(unsigned char dato)
{
	while ((UCSR0A & 0b100000)==0);  //mientras bit UDRE tenga dato
  c4:	e0 ec       	ldi	r30, 0xC0	; 192
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	90 81       	ld	r25, Z
  ca:	95 ff       	sbrs	r25, 5
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <serial_transmit+0x4>
	UDR0=dato;    //SE ENVIA EL DATO
  ce:	80 93 c6 00 	sts	0x00C6, r24
  d2:	08 95       	ret

000000d4 <envia_cadena>:
}

void envia_cadena(char* cadena)
{	 //cadena de caracteres de tipo char
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	ec 01       	movw	r28, r24
	while(*cadena !=0x00){				//mientras el último valor de la cadena sea diferente
  da:	88 81       	ld	r24, Y
  dc:	88 23       	and	r24, r24
  de:	31 f0       	breq	.+12     	; 0xec <envia_cadena+0x18>
  e0:	21 96       	adiw	r28, 0x01	; 1
		//a el caracter nulo
		serial_transmit(*cadena);	//transmite los caracteres de cadena
  e2:	0e 94 62 00 	call	0xc4	; 0xc4 <serial_transmit>
	UDR0=dato;    //SE ENVIA EL DATO
}

void envia_cadena(char* cadena)
{	 //cadena de caracteres de tipo char
	while(*cadena !=0x00){				//mientras el último valor de la cadena sea diferente
  e6:	89 91       	ld	r24, Y+
  e8:	81 11       	cpse	r24, r1
  ea:	fb cf       	rjmp	.-10     	; 0xe2 <envia_cadena+0xe>
		//a el caracter nulo
		serial_transmit(*cadena);	//transmite los caracteres de cadena
		cadena++;						//incrementa la ubicación de los caracteres en cadena
	}
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <__vector_18>:

ISR (USART_RX_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	4f 93       	push	r20
 102:	5f 93       	push	r21
 104:	6f 93       	push	r22
 106:	7f 93       	push	r23
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	af 93       	push	r26
 10e:	bf 93       	push	r27
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
	while ((UCSR0A & 0B10000000)==0)  ;//ESPERA A Q TERMINE DE RECIBIR
 114:	e0 ec       	ldi	r30, 0xC0	; 192
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	88 23       	and	r24, r24
 11c:	ec f7       	brge	.-6      	; 0x118 <__vector_18+0x26>
	dato_recibido=UDR0;
 11e:	80 91 c6 00 	lds	r24, 0x00C6
 122:	80 93 09 01 	sts	0x0109, r24
	
    if (dato_recibido==32)   //SI EL DATO DE ENTRADA ES ENTER
 126:	80 91 09 01 	lds	r24, 0x0109
 12a:	80 32       	cpi	r24, 0x20	; 32
 12c:	f9 f4       	brne	.+62     	; 0x16c <__vector_18+0x7a>
    {
	    cadena[i++]='\0';  //indica fin de cadena
 12e:	e0 91 08 01 	lds	r30, 0x0108
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	e6 5f       	subi	r30, 0xF6	; 246
 136:	fe 4f       	sbci	r31, 0xFE	; 254
 138:	10 82       	st	Z, r1
	    i=0;                 //se resetea el contador
 13a:	10 92 08 01 	sts	0x0108, r1
		envia_cadena(cadena);
 13e:	8a e0       	ldi	r24, 0x0A	; 10
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 6a 00 	call	0xd4	; 0xd4 <envia_cadena>
		if(strcmp(cadena, "On")==0) PORTD|=(1<<7);       
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	71 e0       	ldi	r23, 0x01	; 1
 14a:	8a e0       	ldi	r24, 0x0A	; 10
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <strcmp>
 152:	89 2b       	or	r24, r25
 154:	09 f4       	brne	.+2      	; 0x158 <__vector_18+0x66>
 156:	5f 9a       	sbi	0x0b, 7	; 11
		if(strcmp(cadena, "Off")==0) PORTD&=~(1<<7);	
 158:	63 e0       	ldi	r22, 0x03	; 3
 15a:	71 e0       	ldi	r23, 0x01	; 1
 15c:	8a e0       	ldi	r24, 0x0A	; 10
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	0e 94 db 00 	call	0x1b6	; 0x1b6 <strcmp>
 164:	89 2b       	or	r24, r25
 166:	71 f4       	brne	.+28     	; 0x184 <__vector_18+0x92>
 168:	5f 98       	cbi	0x0b, 7	; 11
 16a:	0c c0       	rjmp	.+24     	; 0x184 <__vector_18+0x92>
    }
    else
    {
	    cadena[i++]=dato_recibido;   //SE GUARDA EL DATO EN UNA POSICION DEL VECTOR
 16c:	e0 91 08 01 	lds	r30, 0x0108
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	8e 0f       	add	r24, r30
 174:	80 93 08 01 	sts	0x0108, r24
 178:	80 91 09 01 	lds	r24, 0x0109
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	e6 5f       	subi	r30, 0xF6	; 246
 180:	fe 4f       	sbci	r31, 0xFE	; 254
 182:	80 83       	st	Z, r24
    }

}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	7f 91       	pop	r23
 192:	6f 91       	pop	r22
 194:	5f 91       	pop	r21
 196:	4f 91       	pop	r20
 198:	3f 91       	pop	r19
 19a:	2f 91       	pop	r18
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <main>:

int main() {
	DDRD = 0B11110010;
 1a6:	82 ef       	ldi	r24, 0xF2	; 242
 1a8:	8a b9       	out	0x0a, r24	; 10
	PORTD= 0B00001100;  //ACTIVA PULL/UP PULSADORES
 1aa:	8c e0       	ldi	r24, 0x0C	; 12
 1ac:	8b b9       	out	0x0b, r24	; 11
	conf_serial_com();
 1ae:	0e 94 53 00 	call	0xa6	; 0xa6 <conf_serial_com>
	sei();
 1b2:	78 94       	sei

	while(1) {

				
	}
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <main+0xe>

000001b6 <strcmp>:
 1b6:	fb 01       	movw	r30, r22
 1b8:	dc 01       	movw	r26, r24
 1ba:	8d 91       	ld	r24, X+
 1bc:	01 90       	ld	r0, Z+
 1be:	80 19       	sub	r24, r0
 1c0:	01 10       	cpse	r0, r1
 1c2:	d9 f3       	breq	.-10     	; 0x1ba <strcmp+0x4>
 1c4:	99 0b       	sbc	r25, r25
 1c6:	08 95       	ret

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
