
disply letras moviles.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000005ea  0000067e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080012e  0080012e  000006ac  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000e0f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00000e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000d47  00000000  00000000  00000ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000349  00000000  00000000  00001c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000444  00000000  00000000  00001f76  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000170  00000000  00000000  000023bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000259  00000000  00000000  0000252c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005a0  00000000  00000000  00002785  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  00002d25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d4 e0       	ldi	r29, 0x04	; 4
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ea ee       	ldi	r30, 0xEA	; 234
  90:	f5 e0       	ldi	r31, 0x05	; 5
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ae 32       	cpi	r26, 0x2E	; 46
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	ae e2       	ldi	r26, 0x2E	; 46
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a4 33       	cpi	r26, 0x34	; 52
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 77 00 	call	0xee	; 0xee <main>
  b2:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <leer_analog>:



void leer_analog(void)
{
	ADMUX=0B01000000;
  ba:	80 e4       	ldi	r24, 0x40	; 64
  bc:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=0B11000011;
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	83 ec       	ldi	r24, 0xC3	; 195
  c6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
  c8:	80 81       	ld	r24, Z
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	80 83       	st	Z, r24
	// wait until conversion complete ADSC=0 -> Complete
	while (ADCSRA & (1<<ADSC));
  ce:	80 81       	ld	r24, Z
  d0:	86 fd       	sbrc	r24, 6
  d2:	fd cf       	rjmp	.-6      	; 0xce <leer_analog+0x14>
	// Get ADC the Result
	dato = ADCW;
  d4:	80 91 78 00 	lds	r24, 0x0078
  d8:	90 91 79 00 	lds	r25, 0x0079
  dc:	90 93 31 01 	sts	0x0131, r25
  e0:	80 93 30 01 	sts	0x0130, r24
  e4:	08 95       	ret

000000e6 <declaraion_puertos>:
}

void declaraion_puertos(void)
{
	DDRB=255;
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	84 b9       	out	0x04, r24	; 4
	DDRA &=~(1<<0);
  ea:	08 98       	cbi	0x01, 0	; 1
  ec:	08 95       	ret

000000ee <main>:
}

int main(void)
{	
	declaraion_puertos();
  ee:	0e 94 73 00 	call	0xe6	; 0xe6 <declaraion_puertos>
	
	lcd_init(LCD_DISP_ON);
  f2:	8c e0       	ldi	r24, 0x0C	; 12
  f4:	0e 94 88 02 	call	0x510	; 0x510 <lcd_init>
	lcd_clrscr();
  f8:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_clrscr>
		{
			 leer_analog();
			 lcd_gotoxy(5,1);
			 lcd_write_value(dato,4);
			
			lcd_gotoxy(15-aux1,0);
  fc:	c2 e3       	ldi	r28, 0x32	; 50
  fe:	d1 e0       	ldi	r29, 0x01	; 1
 100:	0f 2e       	mov	r0, r31
 102:	ff e0       	ldi	r31, 0x0F	; 15
 104:	6f 2e       	mov	r6, r31
 106:	f0 2d       	mov	r31, r0
			lcd_puts("M");
			lcd_gotoxy(16-aux1,0);
 108:	68 94       	set
 10a:	77 24       	eor	r7, r7
 10c:	74 f8       	bld	r7, 4
			lcd_puts("I");
			lcd_gotoxy(17-aux1,0);
 10e:	0f 2e       	mov	r0, r31
 110:	f1 e1       	ldi	r31, 0x11	; 17
 112:	8f 2e       	mov	r8, r31
 114:	f0 2d       	mov	r31, r0
			lcd_puts(" ");
			lcd_gotoxy(18-aux1,0);
 116:	0f 2e       	mov	r0, r31
 118:	f2 e1       	ldi	r31, 0x12	; 18
 11a:	9f 2e       	mov	r9, r31
 11c:	f0 2d       	mov	r31, r0
			lcd_puts("P");
			lcd_gotoxy(19-aux1,0);
 11e:	0f 2e       	mov	r0, r31
 120:	f3 e1       	ldi	r31, 0x13	; 19
 122:	af 2e       	mov	r10, r31
 124:	f0 2d       	mov	r31, r0
			lcd_puts("R");
			lcd_gotoxy(20-aux1,0);
 126:	0f 2e       	mov	r0, r31
 128:	f4 e1       	ldi	r31, 0x14	; 20
 12a:	bf 2e       	mov	r11, r31
 12c:	f0 2d       	mov	r31, r0
	

	while(1)
	{
		
	aux1=0;
 12e:	10 92 33 01 	sts	0x0133, r1
 132:	10 92 32 01 	sts	0x0132, r1
			lcd_puts("P");
			lcd_gotoxy(19-aux1,0);
			lcd_puts("R");
			lcd_gotoxy(20-aux1,0);
			lcd_puts("I");
			lcd_gotoxy(21-aux1,0);
 136:	0f 2e       	mov	r0, r31
 138:	f5 e1       	ldi	r31, 0x15	; 21
 13a:	cf 2e       	mov	r12, r31
 13c:	f0 2d       	mov	r31, r0
			lcd_puts("M");
			lcd_gotoxy(22-aux1,0);
 13e:	0f 2e       	mov	r0, r31
 140:	f6 e1       	ldi	r31, 0x16	; 22
 142:	df 2e       	mov	r13, r31
 144:	f0 2d       	mov	r31, r0
			lcd_puts("E");
			lcd_gotoxy(23-aux1,0);
 146:	0f 2e       	mov	r0, r31
 148:	f7 e1       	ldi	r31, 0x17	; 23
 14a:	ef 2e       	mov	r14, r31
 14c:	f0 2d       	mov	r31, r0
			lcd_puts("R");
			lcd_gotoxy(24-aux1,0);
 14e:	0f 2e       	mov	r0, r31
 150:	f8 e1       	ldi	r31, 0x18	; 24
 152:	ff 2e       	mov	r15, r31
 154:	f0 2d       	mov	r31, r0
			lcd_puts(" ");
			lcd_gotoxy(25-aux1,0);
 156:	09 e1       	ldi	r16, 0x19	; 25
			lcd_puts("P");
			lcd_gotoxy(26-aux1,0);
 158:	1a e1       	ldi	r17, 0x1A	; 26
		
	aux1=0;
	
		while (aux1<39)
		{
			 leer_analog();
 15a:	0e 94 5d 00 	call	0xba	; 0xba <leer_analog>
			 lcd_gotoxy(5,1);
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	85 e0       	ldi	r24, 0x05	; 5
 162:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			 lcd_write_value(dato,4);
 166:	64 e0       	ldi	r22, 0x04	; 4
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	80 91 30 01 	lds	r24, 0x0130
 16e:	90 91 31 01 	lds	r25, 0x0131
 172:	0e 94 28 02 	call	0x450	; 0x450 <lcd_write_value>
			
			lcd_gotoxy(15-aux1,0);
 176:	88 81       	ld	r24, Y
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	26 2d       	mov	r18, r6
 17c:	28 1b       	sub	r18, r24
 17e:	82 2f       	mov	r24, r18
 180:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("M");
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(16-aux1,0);
 18c:	88 81       	ld	r24, Y
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	97 2d       	mov	r25, r7
 192:	98 1b       	sub	r25, r24
 194:	89 2f       	mov	r24, r25
 196:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("I");
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(17-aux1,0);
 1a2:	88 81       	ld	r24, Y
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	28 2d       	mov	r18, r8
 1a8:	28 1b       	sub	r18, r24
 1aa:	82 2f       	mov	r24, r18
 1ac:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts(" ");
 1b0:	8b e2       	ldi	r24, 0x2B	; 43
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(18-aux1,0);
 1b8:	88 81       	ld	r24, Y
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	99 2d       	mov	r25, r9
 1be:	98 1b       	sub	r25, r24
 1c0:	89 2f       	mov	r24, r25
 1c2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("P");
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(19-aux1,0);
 1ce:	88 81       	ld	r24, Y
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	2a 2d       	mov	r18, r10
 1d4:	28 1b       	sub	r18, r24
 1d6:	82 2f       	mov	r24, r18
 1d8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("R");
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(20-aux1,0);
 1e4:	88 81       	ld	r24, Y
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	9b 2d       	mov	r25, r11
 1ea:	98 1b       	sub	r25, r24
 1ec:	89 2f       	mov	r24, r25
 1ee:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("I");
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(21-aux1,0);
 1fa:	88 81       	ld	r24, Y
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	2c 2d       	mov	r18, r12
 200:	28 1b       	sub	r18, r24
 202:	82 2f       	mov	r24, r18
 204:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("M");
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(22-aux1,0);
 210:	88 81       	ld	r24, Y
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	9d 2d       	mov	r25, r13
 216:	98 1b       	sub	r25, r24
 218:	89 2f       	mov	r24, r25
 21a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("E");
 21e:	88 e0       	ldi	r24, 0x08	; 8
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(23-aux1,0);
 226:	88 81       	ld	r24, Y
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	2e 2d       	mov	r18, r14
 22c:	28 1b       	sub	r18, r24
 22e:	82 2f       	mov	r24, r18
 230:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("R");
 234:	86 e0       	ldi	r24, 0x06	; 6
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(24-aux1,0);
 23c:	88 81       	ld	r24, Y
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	9f 2d       	mov	r25, r15
 242:	98 1b       	sub	r25, r24
 244:	89 2f       	mov	r24, r25
 246:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts(" ");
 24a:	8b e2       	ldi	r24, 0x2B	; 43
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(25-aux1,0);
 252:	88 81       	ld	r24, Y
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	20 2f       	mov	r18, r16
 258:	28 1b       	sub	r18, r24
 25a:	82 2f       	mov	r24, r18
 25c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("P");
 260:	84 e0       	ldi	r24, 0x04	; 4
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(26-aux1,0);
 268:	88 81       	ld	r24, Y
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	91 2f       	mov	r25, r17
 26e:	98 1b       	sub	r25, r24
 270:	89 2f       	mov	r24, r25
 272:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("R");
 276:	86 e0       	ldi	r24, 0x06	; 6
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(27-aux1,0);
 27e:	98 81       	ld	r25, Y
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	8b e1       	ldi	r24, 0x1B	; 27
 284:	89 1b       	sub	r24, r25
 286:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("O");
 28a:	8a e0       	ldi	r24, 0x0A	; 10
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(28-aux1,0);
 292:	98 81       	ld	r25, Y
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	8c e1       	ldi	r24, 0x1C	; 28
 298:	89 1b       	sub	r24, r25
 29a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("G");
 29e:	8c e0       	ldi	r24, 0x0C	; 12
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(29-aux1,0);
 2a6:	98 81       	ld	r25, Y
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	8d e1       	ldi	r24, 0x1D	; 29
 2ac:	89 1b       	sub	r24, r25
 2ae:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("R");
 2b2:	86 e0       	ldi	r24, 0x06	; 6
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(30-aux1,0);
 2ba:	98 81       	ld	r25, Y
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	8e e1       	ldi	r24, 0x1E	; 30
 2c0:	89 1b       	sub	r24, r25
 2c2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("A");
 2c6:	8e e0       	ldi	r24, 0x0E	; 14
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(31-aux1,0);
 2ce:	98 81       	ld	r25, Y
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	8f e1       	ldi	r24, 0x1F	; 31
 2d4:	89 1b       	sub	r24, r25
 2d6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("M");
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(32-aux1,0);
 2e2:	98 81       	ld	r25, Y
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	80 e2       	ldi	r24, 0x20	; 32
 2e8:	89 1b       	sub	r24, r25
 2ea:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("A");
 2ee:	8e e0       	ldi	r24, 0x0E	; 14
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(33-aux1,0);
 2f6:	98 81       	ld	r25, Y
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	81 e2       	ldi	r24, 0x21	; 33
 2fc:	89 1b       	sub	r24, r25
 2fe:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts(" ");
 302:	8b e2       	ldi	r24, 0x2B	; 43
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(34-aux1,0);
 30a:	98 81       	ld	r25, Y
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	82 e2       	ldi	r24, 0x22	; 34
 310:	89 1b       	sub	r24, r25
 312:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("E");
 316:	88 e0       	ldi	r24, 0x08	; 8
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(35-aux1,0);
 31e:	98 81       	ld	r25, Y
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	83 e2       	ldi	r24, 0x23	; 35
 324:	89 1b       	sub	r24, r25
 326:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("N");
 32a:	80 e1       	ldi	r24, 0x10	; 16
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(36-aux1,0);
 332:	98 81       	ld	r25, Y
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	84 e2       	ldi	r24, 0x24	; 36
 338:	89 1b       	sub	r24, r25
 33a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts(" ");
 33e:	8b e2       	ldi	r24, 0x2B	; 43
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(37-aux1,0);
 346:	98 81       	ld	r25, Y
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	85 e2       	ldi	r24, 0x25	; 37
 34c:	89 1b       	sub	r24, r25
 34e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts("C");
 352:	82 e1       	ldi	r24, 0x12	; 18
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
			lcd_gotoxy(38-aux1,0);
 35a:	98 81       	ld	r25, Y
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	86 e2       	ldi	r24, 0x26	; 38
 360:	89 1b       	sub	r24, r25
 362:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
			lcd_puts(" ");
 366:	8b e2       	ldi	r24, 0x2B	; 43
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36e:	2f e7       	ldi	r18, 0x7F	; 127
 370:	89 ea       	ldi	r24, 0xA9	; 169
 372:	93 e0       	ldi	r25, 0x03	; 3
 374:	21 50       	subi	r18, 0x01	; 1
 376:	80 40       	sbci	r24, 0x00	; 0
 378:	90 40       	sbci	r25, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <main+0x286>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <main+0x290>
 37e:	00 00       	nop
			_delay_ms(150);	
			aux1++;
 380:	80 91 32 01 	lds	r24, 0x0132
 384:	90 91 33 01 	lds	r25, 0x0133
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	90 93 33 01 	sts	0x0133, r25
 38e:	80 93 32 01 	sts	0x0132, r24
	while(1)
	{
		
	aux1=0;
	
		while (aux1<39)
 392:	87 97       	sbiw	r24, 0x27	; 39
 394:	0c f4       	brge	.+2      	; 0x398 <main+0x2aa>
 396:	e1 ce       	rjmp	.-574    	; 0x15a <main+0x6c>
			_delay_ms(150);	
			aux1++;
			
		}
		
		lcd_gotoxy(0,0);
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_gotoxy>
		lcd_puts("                        ");
 3a0:	84 e1       	ldi	r24, 0x14	; 20
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_puts>
				
		
		/*leer_analog();
		lcd_gotoxy(5,1);
		lcd_write_value(dato,4);*/
	}
 3a8:	c2 ce       	rjmp	.-636    	; 0x12e <main+0x40>

000003aa <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 3aa:	2e 9a       	sbi	0x05, 6	; 5
    lcd_e_delay();
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <toggle_e+0x4>
    lcd_e_low();
 3ae:	2e 98       	cbi	0x05, 6	; 5
 3b0:	08 95       	ret

000003b2 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	d8 2f       	mov	r29, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 3b8:	66 23       	and	r22, r22
 3ba:	11 f0       	breq	.+4      	; 0x3c0 <lcd_write+0xe>
       lcd_rs_high();
 3bc:	2c 9a       	sbi	0x05, 4	; 5
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <lcd_write+0x10>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 3c0:	2c 98       	cbi	0x05, 4	; 5
    }
    lcd_rw_low();
 3c2:	2d 98       	cbi	0x05, 5	; 5

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 3c4:	84 b1       	in	r24, 0x04	; 4
 3c6:	8f 60       	ori	r24, 0x0F	; 15
 3c8:	84 b9       	out	0x04, r24	; 4

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 3ca:	c5 b1       	in	r28, 0x05	; 5
 3cc:	c0 7f       	andi	r28, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 3ce:	8d 2f       	mov	r24, r29
 3d0:	82 95       	swap	r24
 3d2:	8f 70       	andi	r24, 0x0F	; 15
 3d4:	8c 2b       	or	r24, r28
 3d6:	85 b9       	out	0x05, r24	; 5
        lcd_e_toggle();
 3d8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 3dc:	df 70       	andi	r29, 0x0F	; 15
 3de:	dc 2b       	or	r29, r28
 3e0:	d5 b9       	out	0x05, r29	; 5
        lcd_e_toggle();
 3e2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 3e6:	cf 60       	ori	r28, 0x0F	; 15
 3e8:	c5 b9       	out	0x05, r28	; 5
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <lcd_command>:
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
//    lcd_waitbusy();
    lcd_write(cmd,0);
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <lcd_write>
 3f6:	08 95       	ret

000003f8 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 3f8:	61 11       	cpse	r22, r1
 3fa:	04 c0       	rjmp	.+8      	; 0x404 <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 3fc:	80 58       	subi	r24, 0x80	; 128
 3fe:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_command>
 402:	03 c0       	rjmp	.+6      	; 0x40a <lcd_gotoxy+0x12>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 404:	80 54       	subi	r24, 0x40	; 64
 406:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_command>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 40a:	80 e5       	ldi	r24, 0x50	; 80
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <lcd_gotoxy+0x16>
 412:	08 95       	ret

00000414 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_command>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 41a:	80 e2       	ldi	r24, 0x20	; 32
 41c:	9d e0       	ldi	r25, 0x0D	; 13
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <lcd_clrscr+0xa>
 422:	08 95       	ret

00000424 <lcd_putc>:
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
//#endif
//        lcd_waitbusy();
#endif*/
        lcd_write(c, 1);
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <lcd_write>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 42a:	80 e5       	ldi	r24, 0x50	; 80
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <lcd_putc+0xa>
 432:	08 95       	ret

00000434 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 438:	ec 01       	movw	r28, r24
 43a:	89 91       	ld	r24, Y+
 43c:	88 23       	and	r24, r24
 43e:	29 f0       	breq	.+10     	; 0x44a <lcd_puts+0x16>
        lcd_putc(c);
 440:	0e 94 12 02 	call	0x424	; 0x424 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 444:	89 91       	ld	r24, Y+
 446:	81 11       	cpse	r24, r1
 448:	fb cf       	rjmp	.-10     	; 0x440 <lcd_puts+0xc>
        lcd_putc(c);
    }

}/* lcd_puts */
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <lcd_write_value>:

/*************************************************************************

*************************************************************************/
void lcd_write_value(int val,unsigned int field_length)
{
 450:	ef 92       	push	r14
 452:	ff 92       	push	r15
 454:	0f 93       	push	r16
 456:	1f 93       	push	r17
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	00 d0       	rcall	.+0      	; 0x45e <lcd_write_value+0xe>
 45e:	00 d0       	rcall	.+0      	; 0x460 <lcd_write_value+0x10>
 460:	1f 92       	push	r1
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
 466:	7b 01       	movw	r14, r22
char str[5]={0,0,0,0,0};
 468:	fe 01       	movw	r30, r28
 46a:	31 96       	adiw	r30, 0x01	; 1
 46c:	25 e0       	ldi	r18, 0x05	; 5
 46e:	df 01       	movw	r26, r30
 470:	1d 92       	st	X+, r1
 472:	2a 95       	dec	r18
 474:	e9 f7       	brne	.-6      	; 0x470 <lcd_write_value+0x20>
	int i=4,j=0;
	while(val)
 476:	00 97       	sbiw	r24, 0x00	; 0
 478:	61 f0       	breq	.+24     	; 0x492 <lcd_write_value+0x42>
 47a:	fe 01       	movw	r30, r28
 47c:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
 47e:	2a e0       	ldi	r18, 0x0A	; 10
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	b9 01       	movw	r22, r18
 484:	0e 94 cb 02 	call	0x596	; 0x596 <__divmodhi4>
 488:	82 93       	st	-Z, r24
	val=val/10;
 48a:	86 2f       	mov	r24, r22
 48c:	97 2f       	mov	r25, r23
*************************************************************************/
void lcd_write_value(int val,unsigned int field_length)
{
char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 48e:	00 97       	sbiw	r24, 0x00	; 0
 490:	c1 f7       	brne	.-16     	; 0x482 <lcd_write_value+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 492:	bf ef       	ldi	r27, 0xFF	; 255
 494:	eb 16       	cp	r14, r27
 496:	fb 06       	cpc	r15, r27
 498:	69 f4       	brne	.+26     	; 0x4b4 <lcd_write_value+0x64>
		while(str[j]==0) j++;
 49a:	29 81       	ldd	r18, Y+1	; 0x01
 49c:	21 11       	cpse	r18, r1
 49e:	0f c0       	rjmp	.+30     	; 0x4be <lcd_write_value+0x6e>
 4a0:	fe 01       	movw	r30, r28
 4a2:	32 96       	adiw	r30, 0x02	; 2
 4a4:	00 e0       	ldi	r16, 0x00	; 0
 4a6:	10 e0       	ldi	r17, 0x00	; 0
 4a8:	0f 5f       	subi	r16, 0xFF	; 255
 4aa:	1f 4f       	sbci	r17, 0xFF	; 255
 4ac:	21 91       	ld	r18, Z+
 4ae:	22 23       	and	r18, r18
 4b0:	d9 f3       	breq	.-10     	; 0x4a8 <lcd_write_value+0x58>
 4b2:	07 c0       	rjmp	.+14     	; 0x4c2 <lcd_write_value+0x72>
	else
		j=5-field_length;
 4b4:	05 e0       	ldi	r16, 0x05	; 5
 4b6:	10 e0       	ldi	r17, 0x00	; 0
 4b8:	0e 19       	sub	r16, r14
 4ba:	1f 09       	sbc	r17, r15
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <lcd_write_value+0x72>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 4be:	00 e0       	ldi	r16, 0x00	; 0
 4c0:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) lcd_putc('-');
 4c2:	99 23       	and	r25, r25
 4c4:	1c f4       	brge	.+6      	; 0x4cc <lcd_write_value+0x7c>
 4c6:	8d e2       	ldi	r24, 0x2D	; 45
 4c8:	0e 94 12 02 	call	0x424	; 0x424 <lcd_putc>
	for(i=j;i<5;i++)
 4cc:	05 30       	cpi	r16, 0x05	; 5
 4ce:	11 05       	cpc	r17, r1
 4d0:	9c f4       	brge	.+38     	; 0x4f8 <lcd_write_value+0xa8>
}/* lcd_puts_p */

/*************************************************************************

*************************************************************************/
void lcd_write_value(int val,unsigned int field_length)
 4d2:	e1 e0       	ldi	r30, 0x01	; 1
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	ec 0f       	add	r30, r28
 4d8:	fd 1f       	adc	r31, r29
 4da:	0e 0f       	add	r16, r30
 4dc:	1f 1f       	adc	r17, r31
 4de:	7e 01       	movw	r14, r28
 4e0:	f6 e0       	ldi	r31, 0x06	; 6
 4e2:	ef 0e       	add	r14, r31
 4e4:	f1 1c       	adc	r15, r1
		j=5-field_length;

	if(val<0) lcd_putc('-');
	for(i=j;i<5;i++)
	{
	lcd_putc(48+str[i]);
 4e6:	d8 01       	movw	r26, r16
 4e8:	8d 91       	ld	r24, X+
 4ea:	8d 01       	movw	r16, r26
 4ec:	80 5d       	subi	r24, 0xD0	; 208
 4ee:	0e 94 12 02 	call	0x424	; 0x424 <lcd_putc>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) lcd_putc('-');
	for(i=j;i<5;i++)
 4f2:	0e 15       	cp	r16, r14
 4f4:	1f 05       	cpc	r17, r15
 4f6:	b9 f7       	brne	.-18     	; 0x4e6 <lcd_write_value+0x96>
	{
	lcd_putc(48+str[i]);
	}
	
}/*
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	1f 91       	pop	r17
 508:	0f 91       	pop	r16
 50a:	ff 90       	pop	r15
 50c:	ef 90       	pop	r14
 50e:	08 95       	ret

00000510 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 510:	1f 93       	push	r17
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 518:	84 b1       	in	r24, 0x04	; 4
 51a:	8f 67       	ori	r24, 0x7F	; 127
 51c:	84 b9       	out	0x04, r24	; 4
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	9d e7       	ldi	r25, 0x7D	; 125
 522:	01 97       	sbiw	r24, 0x01	; 1
 524:	f1 f7       	brne	.-4      	; 0x522 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 526:	29 9a       	sbi	0x05, 1	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 528:	28 9a       	sbi	0x05, 0	; 5
    lcd_e_toggle();
 52a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	97 e2       	ldi	r25, 0x27	; 39
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 536:	0e 94 d5 01 	call	0x3aa	; 0x3aa <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 53a:	c0 e8       	ldi	r28, 0x80	; 128
 53c:	d0 e0       	ldi	r29, 0x00	; 0
 53e:	fe 01       	movw	r30, r28
 540:	31 97       	sbiw	r30, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <lcd_init+0x30>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 544:	0e 94 d5 01 	call	0x3aa	; 0x3aa <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 548:	fe 01       	movw	r30, r28
 54a:	31 97       	sbiw	r30, 0x01	; 1
 54c:	f1 f7       	brne	.-4      	; 0x54a <lcd_init+0x3a>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 54e:	28 98       	cbi	0x05, 0	; 5
    lcd_e_toggle();
 550:	0e 94 d5 01 	call	0x3aa	; 0x3aa <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 554:	21 97       	sbiw	r28, 0x01	; 1
 556:	f1 f7       	brne	.-4      	; 0x554 <lcd_init+0x44>
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
//    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
    lcd_command(LCD_FUNCTION_4BIT_2LINES);      /* function set: display lines  */
 558:	88 e2       	ldi	r24, 0x28	; 40
 55a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_command>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 55e:	c0 e5       	ldi	r28, 0x50	; 80
 560:	d0 e0       	ldi	r29, 0x00	; 0
 562:	fe 01       	movw	r30, r28
 564:	31 97       	sbiw	r30, 0x01	; 1
 566:	f1 f7       	brne	.-4      	; 0x564 <lcd_init+0x54>
#else
//    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
    lcd_command(LCD_FUNCTION_4BIT_2LINES);      /* function set: display lines  */
	delay(40);
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 568:	88 e0       	ldi	r24, 0x08	; 8
 56a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_command>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 56e:	fe 01       	movw	r30, r28
 570:	31 97       	sbiw	r30, 0x01	; 1
 572:	f1 f7       	brne	.-4      	; 0x570 <lcd_init+0x60>
	delay(40);
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
	delay(40);
//    lcd_command(LCD_DISP_ON_CURSOR);              /* display off                  */
    lcd_clrscr();                           /* display clear                */ 
 574:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 578:	86 e0       	ldi	r24, 0x06	; 6
 57a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_command>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 57e:	fe 01       	movw	r30, r28
 580:	31 97       	sbiw	r30, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <lcd_init+0x70>
	delay(40);
//    lcd_command(LCD_DISP_ON_CURSOR);              /* display off                  */
    lcd_clrscr();                           /* display clear                */ 
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
	delay(40);
    lcd_command(dispAttr);                  /* display/cursor control       */
 584:	81 2f       	mov	r24, r17
 586:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <lcd_command>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 58a:	21 97       	sbiw	r28, 0x01	; 1
 58c:	f1 f7       	brne	.-4      	; 0x58a <lcd_init+0x7a>
    lcd_clrscr();                           /* display clear                */ 
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
	delay(40);
    lcd_command(dispAttr);                  /* display/cursor control       */
	delay(40);
}/* lcd_init */
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	1f 91       	pop	r17
 594:	08 95       	ret

00000596 <__divmodhi4>:
 596:	97 fb       	bst	r25, 7
 598:	07 2e       	mov	r0, r23
 59a:	16 f4       	brtc	.+4      	; 0x5a0 <__divmodhi4+0xa>
 59c:	00 94       	com	r0
 59e:	07 d0       	rcall	.+14     	; 0x5ae <__divmodhi4_neg1>
 5a0:	77 fd       	sbrc	r23, 7
 5a2:	09 d0       	rcall	.+18     	; 0x5b6 <__divmodhi4_neg2>
 5a4:	0e 94 df 02 	call	0x5be	; 0x5be <__udivmodhi4>
 5a8:	07 fc       	sbrc	r0, 7
 5aa:	05 d0       	rcall	.+10     	; 0x5b6 <__divmodhi4_neg2>
 5ac:	3e f4       	brtc	.+14     	; 0x5bc <__divmodhi4_exit>

000005ae <__divmodhi4_neg1>:
 5ae:	90 95       	com	r25
 5b0:	81 95       	neg	r24
 5b2:	9f 4f       	sbci	r25, 0xFF	; 255
 5b4:	08 95       	ret

000005b6 <__divmodhi4_neg2>:
 5b6:	70 95       	com	r23
 5b8:	61 95       	neg	r22
 5ba:	7f 4f       	sbci	r23, 0xFF	; 255

000005bc <__divmodhi4_exit>:
 5bc:	08 95       	ret

000005be <__udivmodhi4>:
 5be:	aa 1b       	sub	r26, r26
 5c0:	bb 1b       	sub	r27, r27
 5c2:	51 e1       	ldi	r21, 0x11	; 17
 5c4:	07 c0       	rjmp	.+14     	; 0x5d4 <__udivmodhi4_ep>

000005c6 <__udivmodhi4_loop>:
 5c6:	aa 1f       	adc	r26, r26
 5c8:	bb 1f       	adc	r27, r27
 5ca:	a6 17       	cp	r26, r22
 5cc:	b7 07       	cpc	r27, r23
 5ce:	10 f0       	brcs	.+4      	; 0x5d4 <__udivmodhi4_ep>
 5d0:	a6 1b       	sub	r26, r22
 5d2:	b7 0b       	sbc	r27, r23

000005d4 <__udivmodhi4_ep>:
 5d4:	88 1f       	adc	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	5a 95       	dec	r21
 5da:	a9 f7       	brne	.-22     	; 0x5c6 <__udivmodhi4_loop>
 5dc:	80 95       	com	r24
 5de:	90 95       	com	r25
 5e0:	bc 01       	movw	r22, r24
 5e2:	cd 01       	movw	r24, r26
 5e4:	08 95       	ret

000005e6 <_exit>:
 5e6:	f8 94       	cli

000005e8 <__stop_program>:
 5e8:	ff cf       	rjmp	.-2      	; 0x5e8 <__stop_program>
