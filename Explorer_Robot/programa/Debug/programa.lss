
programa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000228  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000029c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001ca  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000fa  00000000  00000000  0000053e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c9  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00000904  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000136  00000000  00000000  00000bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00000d01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_13>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_14>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__vector_20>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	bf 00       	.word	0x00bf	; ????
  7e:	c2 00       	.word	0x00c2	; ????
  80:	c5 00       	.word	0x00c5	; ????
  82:	c8 00       	.word	0x00c8	; ????
  84:	cb 00       	.word	0x00cb	; ????
  86:	ce 00       	.word	0x00ce	; ????
  88:	d1 00       	.word	0x00d1	; ????
  8a:	d4 00       	.word	0x00d4	; ????
  8c:	d7 00       	.word	0x00d7	; ????
  8e:	da 00       	.word	0x00da	; ????

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	d4 e0       	ldi	r29, 0x04	; 4
  98:	de bf       	out	0x3e, r29	; 62
  9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_clear_bss>:
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b1 e0       	ldi	r27, 0x01	; 1
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a1 30       	cpi	r26, 0x01	; 1
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  b0:	0c 94 12 01 	jmp	0x224	; 0x224 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <declaraciones>:
}

void serial_transmit(unsigned char dato)
{
	while ((UCSR0A & 0b100000)==0);  //mientras bit UDRE tenga dato
	UDR0=dato;    //SE ENVIA EL DATO
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	81 b9       	out	0x01, r24	; 1
  bc:	84 b9       	out	0x04, r24	; 4
  be:	82 ef       	ldi	r24, 0xF2	; 242
  c0:	8a b9       	out	0x0a, r24	; 10
  c2:	8c e0       	ldi	r24, 0x0C	; 12
  c4:	8b b9       	out	0x0b, r24	; 11
  c6:	08 95       	ret

000000c8 <conf_pwm>:
  c8:	83 ea       	ldi	r24, 0xA3	; 163
  ca:	84 bd       	out	0x24, r24	; 36
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	85 bd       	out	0x25, r24	; 37
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	87 bd       	out	0x27, r24	; 39
  d4:	88 bd       	out	0x28, r24	; 40
  d6:	08 95       	ret

000000d8 <timer1>:
  d8:	10 92 80 00 	sts	0x0080, r1
  dc:	8a e0       	ldi	r24, 0x0A	; 10
  de:	80 93 81 00 	sts	0x0081, r24
  e2:	8a ef       	ldi	r24, 0xFA	; 250
  e4:	9f ef       	ldi	r25, 0xFF	; 255
  e6:	90 93 89 00 	sts	0x0089, r25
  ea:	80 93 88 00 	sts	0x0088, r24
  ee:	88 ea       	ldi	r24, 0xA8	; 168
  f0:	91 e6       	ldi	r25, 0x61	; 97
  f2:	90 93 8b 00 	sts	0x008B, r25
  f6:	80 93 8a 00 	sts	0x008A, r24
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	80 93 6f 00 	sts	0x006F, r24
 100:	08 95       	ret

00000102 <__vector_13>:
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	8c 7f       	andi	r24, 0xFC	; 252
 112:	85 b9       	out	0x05, r24	; 5
 114:	12 b8       	out	0x02, r1	; 2
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <__vector_14>:
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <conf_serial_com>:
 136:	10 92 c0 00 	sts	0x00C0, r1
 13a:	88 e9       	ldi	r24, 0x98	; 152
 13c:	80 93 c1 00 	sts	0x00C1, r24
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	80 93 c2 00 	sts	0x00C2, r24
 146:	83 e3       	ldi	r24, 0x33	; 51
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 c5 00 	sts	0x00C5, r25
 14e:	80 93 c4 00 	sts	0x00C4, r24
 152:	08 95       	ret

00000154 <main>:
 154:	0e 94 5c 00 	call	0xb8	; 0xb8 <declaraciones>
 158:	0e 94 64 00 	call	0xc8	; 0xc8 <conf_pwm>
 15c:	0e 94 9b 00 	call	0x136	; 0x136 <conf_serial_com>
 160:	0e 94 6c 00 	call	0xd8	; 0xd8 <timer1>
 164:	78 94       	sei
 166:	ff cf       	rjmp	.-2      	; 0x166 <main+0x12>

00000168 <movimiento>:


void movimiento(uint8_t val)  //mov_xxxx
{
	//pwm de 0 a 255
	switch (val)
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fc 01       	movw	r30, r24
 16c:	e1 56       	subi	r30, 0x61	; 97
 16e:	f1 09       	sbc	r31, r1
 170:	ea 30       	cpi	r30, 0x0A	; 10
 172:	f1 05       	cpc	r31, r1
 174:	08 f5       	brcc	.+66     	; 0x1b8 <movimiento+0x50>
 176:	e2 5c       	subi	r30, 0xC2	; 194
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	0c 94 0c 01 	jmp	0x218	; 0x218 <__tablejump2__>
	{
		case 'a': //MOTOR1_D
		PORT_MOTOR1|=(1<<M1_1);
 17e:	28 9a       	sbi	0x05, 0	; 5
		PORT_MOTOR1&=~(1<<M1_2);
 180:	29 98       	cbi	0x05, 1	; 5
		break;
 182:	08 95       	ret

		case 'b': //MOTOR1_I
		PORT_MOTOR1|=(1<<M1_2);
 184:	29 9a       	sbi	0x05, 1	; 5
		PORT_MOTOR1&=~(1<<M1_1);
 186:	28 98       	cbi	0x05, 0	; 5
		break;
 188:	08 95       	ret
		
		case 'c': //MOTOR2_D
		PORT_MOTOR2|=(1<<M2_1);
 18a:	10 9a       	sbi	0x02, 0	; 2
		PORT_MOTOR2&=~(1<<M2_2);
 18c:	11 98       	cbi	0x02, 1	; 2
		break;
 18e:	08 95       	ret
		
		case 'd': //MOTOR2_I
		PORT_MOTOR2|=(1<<M2_2);
 190:	11 9a       	sbi	0x02, 1	; 2
		PORT_MOTOR2&=~(1<<M2_1);
 192:	10 98       	cbi	0x02, 0	; 2
		break;
 194:	08 95       	ret
		
		case 'e': //MOTOR2_D
		PORT_MOTOR3|=(1<<M3_1);
 196:	12 9a       	sbi	0x02, 2	; 2
		PORT_MOTOR3&=~(1<<M3_2);
 198:	13 98       	cbi	0x02, 3	; 2
		break;
 19a:	08 95       	ret
		
		case 'f': //MOTOR2_I
		PORT_MOTOR3|=(1<<M3_2);
 19c:	13 9a       	sbi	0x02, 3	; 2
		PORT_MOTOR3&=~(1<<M3_1);
 19e:	12 98       	cbi	0x02, 2	; 2
		break;
 1a0:	08 95       	ret

		case 'g': //MOTOR2_D
		PORT_MOTOR4|=(1<<M4_1);
 1a2:	14 9a       	sbi	0x02, 4	; 2
		PORT_MOTOR4&=~(1<<M4_2);
 1a4:	15 98       	cbi	0x02, 5	; 2
		break;
 1a6:	08 95       	ret
		
		case 'h': //MOTOR2_I
		PORT_MOTOR4|=(1<<M4_2);
 1a8:	15 9a       	sbi	0x02, 5	; 2
		PORT_MOTOR4&=~(1<<M4_1);
 1aa:	14 98       	cbi	0x02, 4	; 2
		break;
 1ac:	08 95       	ret
		
		case 'i': //MOTOR5_D
		PORT_MOTOR5|=(1<<M5_1);
 1ae:	16 9a       	sbi	0x02, 6	; 2
		PORT_MOTOR5&=~(1<<M5_2);
 1b0:	17 98       	cbi	0x02, 7	; 2
		break;
 1b2:	08 95       	ret
		
		case 'j': //MOTOR5_I
		PORT_MOTOR5|=(1<<M5_2);
 1b4:	17 9a       	sbi	0x02, 7	; 2
		PORT_MOTOR5&=~(1<<M5_1);
 1b6:	16 98       	cbi	0x02, 6	; 2
 1b8:	08 95       	ret

000001ba <__vector_20>:
	while ((UCSR0A & 0b100000)==0);  //mientras bit UDRE tenga dato
	UDR0=dato;    //SE ENVIA EL DATO
}

ISR (USART0_RX_vect)
{
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	2f 93       	push	r18
 1c6:	3f 93       	push	r19
 1c8:	4f 93       	push	r20
 1ca:	5f 93       	push	r21
 1cc:	6f 93       	push	r22
 1ce:	7f 93       	push	r23
 1d0:	8f 93       	push	r24
 1d2:	9f 93       	push	r25
 1d4:	af 93       	push	r26
 1d6:	bf 93       	push	r27
 1d8:	ef 93       	push	r30
 1da:	ff 93       	push	r31
	while ((UCSR0A & 0B10000000)==0)  ;//ESPERA A Q TERMINE DE RECIBIR
 1dc:	e0 ec       	ldi	r30, 0xC0	; 192
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	88 23       	and	r24, r24
 1e4:	ec f7       	brge	.-6      	; 0x1e0 <__vector_20+0x26>
	dato_recibido=UDR0;
 1e6:	80 91 c6 00 	lds	r24, 0x00C6
 1ea:	80 93 00 01 	sts	0x0100, r24

	movimiento(dato_recibido);
 1ee:	80 91 00 01 	lds	r24, 0x0100
 1f2:	0e 94 b4 00 	call	0x168	; 0x168 <movimiento>

}
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <__tablejump2__>:
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	05 90       	lpm	r0, Z+
 21e:	f4 91       	lpm	r31, Z
 220:	e0 2d       	mov	r30, r0
 222:	09 94       	ijmp

00000224 <_exit>:
 224:	f8 94       	cli

00000226 <__stop_program>:
 226:	ff cf       	rjmp	.-2      	; 0x226 <__stop_program>
